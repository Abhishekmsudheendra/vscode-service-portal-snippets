{
  "Service Portal: AngularJS $broadcast": {
    "prefix": "sp-ng-broadcast",
    "body": ["$$rootScope.$$broadcast('${1:eventName}', ${2:args});"],
    "description": "AngularJS $broadcast: Dispatches an event name downwards to all child scopes (and their children)"
  },
  "Service Portal: AngularJS Component": {
    "prefix": "sp-ng-component",
    "body": [
      "(function() {",
      "\t'use strict';",
      "",
      "\tvar componentName = {",
      "\t\ttemplate: [",
      "\t\t\t''",
      "\t\t].join('')",
      "\t};",
      "",
      "\tangular",
      "\t\t.module('moduleName')",
      "\t\t.component('componentName', componentName);",
      "})();"
    ],
    "description": "AngularJS Component: is a special kind of directive that uses a simpler configuration which is suitable for a component-based application structure"
  },
  "Service Portal: AngularJS Controller": {
    "prefix": "sp-ng-controller",
    "body": [
      "function ${1:Name}Controller() {",
      "\tvar c = this;",
      "",
      "\tc.$$onInit = function() {$2};",
      "}"
    ],
    "description": "AngularJS Controller: is defined by a JavaScript constructor function that is used to augment the scope"
  },
  "Service Portal: Embedded widget": {
    "prefix": "sp-spUtil-embed-widget",
    "body": [
      "spUtil.get('${1:example-widget}').then(function(response) {",
      "\t${2:c.exampleWidget} = response;",
      "});"
    ],
    "description": "Embedded widget: Use spUtil.get() to get a widget model in the client script"
  },
  "Service Portal: Embedded widget with options": {
    "prefix": "sp-spUtil-embed-widget-options",
    "body": [
      "spUtil.get('${1:example-widget}', {${2:sys_id}: '${3:example_sys_id}'}).then(function(response) {",
      "\t${4:c.exampleWidget} = response;",
      "});"
    ],
    "description": "Embedded widget: Use spUtil.get() to get a widget model in the client script"
  },
  "Service Portal: AngularJS $emit": {
    "prefix": "sp-ng-emit",
    "body": ["$$rootScope.$$emit('${1:eventName}', ${2:args});"],
    "description": "AngularJS $emit: Dispatches an event name upwards through the scope hierarchy"
  },
  "Service Portal: GlideUser getDisplayName()": {
    "prefix": "sp-getDisplayName",
    "body": ["var ${1:currentUser} = gs.getUser().getDisplayName();"],
    "description": "getDisplayName(): Returns the current user's display name"
  },
  "Service Portal: GlideUser getEmail()": {
    "prefix": "sp-getEmail",
    "body": ["var ${1:email} = gs.getUser().getEmail();"],
    "description": "getEmail(): Returns the user's email address"
  },
  "Service Portal: GlideUser getFirstName()": {
    "prefix": "sp-getFirstName",
    "body": ["var ${1:firstName} = gs.getUser().getFirstName();"],
    "description": "getFirstName(): Returns the user's first name"
  },
  "Service Portal: GlideUser getID()": {
    "prefix": "sp-getID",
    "body": ["var ${1:userID} = gs.getUser().getID();"],
    "description": "getID(): Gets the sys_id of the current user"
  },
  "Service Portal: GlideUser getLastName()": {
    "prefix": "sp-getLastName",
    "body": ["var ${1:lastName} = gs.getUser().getLastName();"],
    "description": "getLastName(): Returns the user's last name"
  },
  "Service Portal: GlideUser getUserName()": {
    "prefix": "sp-getUserName",
    "body": ["var ${1:username} = gs.getUserName();"],
    "description": "getUserName(): Returns the current user's username"
  },
  "Service Portal: GlideUser hasRole()": {
    "prefix": "sp-hasRole",
    "body": ["var ${1:hasRole} = gs.getUser().hasRole('${2:admin}');"],
    "description": "hasRole(): Determines if the current user has the specified role"
  },
  "Service Portal: GlideUser isMemberOf()": {
    "prefix": "sp-isMemberOf",
    "body": ["var ${1:isMember} = gs.getUser().isMemberOf('${2:Service Desk}');"],
    "description": "isMemberOf(): Determines if the current user is a member of the specified group"
  },
  "Service Portal: AngularJS Module": {
    "prefix": "sp-ng-module",
    "body": [
      "(function() {",
      "\t'use strict';",
      "",
      "\tangular.module('${1:moduleName}', []);",
      "})();"
    ],
    "description": "AngularJS Module: is a global place for creating, registering and retrieving AngularJS modules"
  },
  "Service Portal: AngularJS $on": {
    "prefix": "sp-ng-on",
    "body": [
      "$$scope.$$on('${1:eventName}', function(event, args) {",
      "\t$2console.log(args);",
      "});"
    ],
    "description": "AngularJS $on: Listens on events of a given type"
  },
  "Service Portal: AngularJS $onInit": {
    "prefix": "sp-ng-onInit",
    "body": [
      "c.$$onInit = function() {",
      "\t$1",
      "};"
    ],
    "description": "AngularJS $onInit: Called on each controller after all the controllers on an element have been constructed and had their bindings initialized"
  },
  "Service Portal: Record Watch": {
    "prefix": "sp-spUtil-record-watch",
    "body": [
      "spUtil.recordWatch($$scope, '${1:incident}', '${2:active=true}', function(name, data) {",
      "\t$3console.log(name);",
      "\t$4console.log(data);",
      "});"
    ],
    "description": "Record Watch: A tool that allows a widget developer to respond to table updates in real-time"
  },
  "Service Portal: AngularJS Service": {
    "prefix": "sp-ng-service",
    "body": [
      "(function() {",
      "\t'use strict';",
      "",
      "\tfunction ${1:serviceName}() {",
      "\t\tvar service = {",
      "\t\t\t${2:getSomething}: ${3:getSomething}",
      "\t\t};",
      "\t\treturn service;",
      "",
      "\t\tfunction ${4:getSomething}() {}",
      "\t}",
      "",
      "\tangular",
      "\t\t.module('${5:moduleName}')",
      "\t\t.service('${6:serviceName}', ${7:serviceName});",
      "})();"
    ],
    "description": "AngularJS Service: is a constructor function which is invoked once at runtime and wired together using dependency injection (DI)"
  }
}