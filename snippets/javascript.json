{
  "Service Portal: AngularJS $broadcast": {
    "prefix": "sp-ng-broadcast",
    "body": ["$$rootScope.$$broadcast('${1:eventName}', ${2:args});"],
    "description": "AngularJS $broadcast: Dispatches an event name downwards to all child scopes (and their children)"
  },
  "Service Portal: AngularJS Component": {
    "prefix": "sp-ng-component",
    "body": [
      "(function() {",
      "\t'use strict';",
      "",
      "\tvar componentName = {",
      "\t\ttemplate: [",
      "\t\t\t''",
      "\t\t].join('')",
      "\t};",
      "",
      "\tangular",
      "\t\t.module('moduleName')",
      "\t\t.component('componentName', componentName);",
      "})();"
    ],
    "description": "AngularJS Component: is a special kind of directive that uses a simpler configuration which is suitable for a component-based application structure"
  },
  "Service Portal: AngularJS Controller": {
    "prefix": "sp-ng-controller",
    "body": [
      "function ${1:Name}Controller() {",
      "\tvar c = this;",
      "",
      "\tc.$$onInit = function() {$2};",
      "}"
    ],
    "description": "AngularJS Controller: is defined by a JavaScript constructor function that is used to augment the scope"
  },
  "Service Portal: AngularJS $emit": {
    "prefix": "sp-ng-emit",
    "body": ["$$rootScope.$$emit('${1:eventName}', ${2:args});"],
    "description": "AngularJS $emit: Dispatches an event name upwards through the scope hierarchy"
  },
  "Service Portal: GlideUser getDisplayName()": {
    "prefix": "sp-user-getDisplayName",
    "body": ["var ${1:currentUser} = gs.getUser().getDisplayName();"],
    "description": "getDisplayName(): Returns the current user's display name"
  },
  "Service Portal: GlideUser getEmail()": {
    "prefix": "sp-user-getEmail",
    "body": ["var ${1:email} = gs.getUser().getEmail();"],
    "description": "getEmail(): Returns the user's email address"
  },
  "Service Portal: GlideUser getFirstName()": {
    "prefix": "sp-user-getFirstName",
    "body": ["var ${1:firstName} = gs.getUser().getFirstName();"],
    "description": "getFirstName(): Returns the user's first name"
  },
  "Service Portal: GlideUser getID()": {
    "prefix": "sp-user-getID",
    "body": ["var ${1:userID} = gs.getUser().getID();"],
    "description": "getID(): Gets the sys_id of the current user"
  },
  "Service Portal: GlideUser getLastName()": {
    "prefix": "sp-user-getLastName",
    "body": ["var ${1:lastName} = gs.getUser().getLastName();"],
    "description": "getLastName(): Returns the user's last name"
  },
  "Service Portal: GlideUser getUserName()": {
    "prefix": "sp-user-getUserName",
    "body": ["var ${1:username} = gs.getUserName();"],
    "description": "getUserName(): Returns the current user's username"
  },
  "Service Portal: GlideUser hasRole()": {
    "prefix": "sp-user-hasRole",
    "body": ["var ${1:hasRole} = gs.getUser().hasRole('${2:admin}');"],
    "description": "hasRole(): Determines if the current user has the specified role"
  },
  "Service Portal: GlideUser isMemberOf()": {
    "prefix": "sp-user-isMemberOf",
    "body": ["var ${1:isMember} = gs.getUser().isMemberOf('${2:Service Desk}');"],
    "description": "isMemberOf(): Determines if the current user is a member of the specified group"
  },
  "Service Portal: GlideRecord addActiveQuery()": {
    "prefix": "sp-record-addActiveQuery",
    "body": [
      "var inc = new GlideRecord('${1:incident}');",
      "inc.addActiveQuery();",
      "inc.query();"
    ],
    "description": "addActiveQuery(): Adds a filter to return active records"
  },
  "Service Portal: GlideRecord addEncodedQuery()": {
    "prefix": "sp-record-addEncodedQuery",
    "body": [
      "var query = '${1:priority=1^ORpriority=2}';",
      "var gr = new GlideRecord('${1:incident}');",
      "gr.addEncodedQuery(query);",
      "gr.query();"
    ],
    "description": "addEncodedQuery(): Adds an encoded query to other queries that may have been set"
  },
  "Service Portal: GlideRecord create": {
    "prefix": "sp-record-create",
    "body": ["var gr = new GlideRecord('${1:incident}');"],
    "description": "GlideRecord: Creates an instance of the GlideRecord class for the specified table"
  },
  "Service Portal: GlideRecord deleteMultiple()": {
    "prefix": "sp-record-deleteMultiple",
    "body": [
      "var gr = new GlideRecord('${1:incident}');",
      "gr.addQuery('${2:active}', '${3:false}');",
      "gr.deleteMultiple();"
    ],
    "description": "deleteMultiple(): Deletes multiple records that satisfy the query condition"
  },
  "Service Portal: GlideRecord deleteRecord()": {
    "prefix": "sp-record-deleteRecord",
    "body": [
      "var gr = new GlideRecord('${1:incident}');",
      "gr.addQuery('${2:sys_id}', '${3:99ebb4156fa831005be8883e6b3ee4b9}');",
      "gr.query();",
      "gr.next();",
      "gr.deleteRecord();"
    ],
    "description": "deleteRecord(): Deletes the current record"
  },
  "Service Portal: GlideRecord get()": {
    "prefix": "sp-record-get",
    "body": [
      "var gr = new GlideRecord('${1:incident}');",
      "gr.get('${2:bf5a8df9db55d700abd4f9361d961937}');",
      "gs.info(${3:gr.number});"
    ],
    "description": "get(): This method is expected to be used to query for single records"
  },
  "Service Portal: GlideRecord getRowCount()": {
    "prefix": "sp-record-getRowCount",
    "body": [
      "var gr = new GlideRecord('${1:incident}');",
      "gr.query();",
      "gs.info(${2:'Records in incident table: ' + gr.getRowCount()});"
    ],
    "description": "getRowCount(): Retrieves the number of rows in the query result"
  },
  "Service Portal: GlideRecord setLimit()": {
    "prefix": "sp-record-setLimit",
    "body": [
      "var gr = new GlideRecord('${1:incident}');",
      "gr.orderByDesc('${2:sys_created_on}');",
      "gr.setLimit(${3:10});",
      "gr.query();"
    ],
    "description": "setLimit(): This method is expected to be used to query for single records"
  },
  "Service Portal: AngularJS Module": {
    "prefix": "sp-ng-module",
    "body": [
      "(function() {",
      "\t'use strict';",
      "",
      "\tangular.module('${1:moduleName}', []);",
      "})();"
    ],
    "description": "AngularJS Module: is a global place for creating, registering and retrieving AngularJS modules"
  },
  "Service Portal: AngularJS $on": {
    "prefix": "sp-ng-on",
    "body": [
      "$$scope.$$on('${1:eventName}', function(event, args) {",
      "\t$2console.log(args);",
      "});"
    ],
    "description": "AngularJS $on: Listens on events of a given type"
  },
  "Service Portal: AngularJS $onInit": {
    "prefix": "sp-ng-onInit",
    "body": [
      "c.$$onInit = function() {",
      "\t$1",
      "};"
    ],
    "description": "AngularJS $onInit: Called on each controller after all the controllers on an element have been constructed and had their bindings initialized"
  },
  "Service Portal: AngularJS Service": {
    "prefix": "sp-ng-service",
    "body": [
      "(function() {",
        "\t'use strict';",
        "",
        "\tfunction ${1:serviceName}() {",
          "\t\tvar service = {",
            "\t\t\t${2:getSomething}: ${3:getSomething}",
            "\t\t};",
            "\t\treturn service;",
            "",
            "\t\tfunction ${4:getSomething}() {}",
            "\t}",
            "",
            "\tangular",
            "\t\t.module('${5:moduleName}')",
            "\t\t.service('${6:serviceName}', ${7:serviceName});",
            "})();"
          ],
          "description": "AngularJS Service: is a constructor function which is invoked once at runtime and wired together using dependency injection (DI)"
        },
        "Service Portal: spModal alert": {
          "prefix": "sp-spModal-alert",
          "body": [
            "function OnAlertController(spModal) {",
            "\tvar c = this;",
            "\tc.onAlert = onAlert;",
            "",
            "\tfunction onAlert() {",
            "\t\treturn spModal.alert('How do you feel today?').then(function(answer) {",
            "\t\t\tc.simple = answer;",
            "\t\t});",
            "\t}",
            "}"
          ],
          "description": "spModal alert: Displays an alert"
        },
        "Service Portal: spModal confirm": {
          "prefix": "sp-spModal-confirm",
          "body": [
            "function OnConfirmController(spModal) {",
            "\tvar c = this;",
            "\tc.onConfirm = onConfirm;",
            "",
            "\tfunction onConfirm() {",
            "\t\tc.confirmed = 'asking';",
            "\t\treturn spModal.confirm('Can you confirm or deny this?').then(function(confirmed) {",
            "\t\t\tc.confirmed = confirmed;",
            "\t\t});",
            "\t}",
            "}"
          ],
          "description": "spModal confirm: Displays a confirmation message"
        },
        "Service Portal: spModal open": {
          "prefix": "sp-spModal-open",
          "body": [
            "function OnWidgetController(spModal) {",
            "\tvar c = this;",
            "\tc.onWidget = onWidget;",
            "",
            "\tfunction onWidget(widgetId, widgetInput) {",
            "\t\treturn spModal.open({",
            "\t\t\ttitle: 'Displaying widget ' + widgetId,",
            "\t\t\twidget: widgetId,",
            "\t\t\twidgetInput: widgetInput || {}",
            "\t\t}).then(function() {",
            "\t\t\tconsole.log('widget dismissed');",
            "\t\t});",
            "\t}",
            "}"
          ],
          "description": "spModal open: Opens a modal window with an embedded widget"
        },
        "Service Portal: spModal prompt": {
          "prefix": "sp-spModal-prompt",
          "body": [
            "function onPromptController(spModal) {",
            "\tvar c = this;",
            "\tc.onPrompt = onPrompt;",
            "",
            "\tfunction onPrompt() {",
            "\t\treturn spModal.prompt('Your name please', c.name).then(function(name) {",
            "\t\t\tc.name = name;",
            "\t\t});",
            "\t}",
            "}"
          ],
          "description": "spModal prompt: Displays a prompt for user input"
        },
        "Service Portal: spUtil addErrorMessage": {
          "prefix": "sp-spUtil-addErrorMessage",
          "body": ["spUtil.addErrorMessage('${1:Sample error message}');"],
          "description": "addErrorMessage: Displays a notification error message"
        },
        "Service Portal: spUtil addInfoMessage": {
          "prefix": "sp-spUtil-addInfoMessage",
          "body": ["spUtil.addInfoMessage('${1:Sample info message}');"],
          "description": "addInfoMessage: Displays a notification info message"
        },
        "Service Portal: spUtil addTrivialMessage": {
          "prefix": "sp-spUtil-addTrivialMessage",
          "body": ["spUtil.addTrivialMessage('${1:Sample trivial message}');"],
          "description": "addTrivialMessage: Displays a trivial notification message"
        },
        "Service Portal: spUtil Get Widget": {
          "prefix": "sp-spUtil-get",
          "body": [
            "spUtil.get('${1:example-widget}').then(function(response) {",
            "\t${2:c.exampleWidget} = response;",
            "});"
          ],
          "description": "Embedded widget: Use spUtil.get() to get a widget model in the client script"
        },
        "Service Portal: spUtil Get Widget with Options": {
          "prefix": "sp-spUtil-get-options",
          "body": [
            "spUtil.get('${1:example-widget}', {${2:sys_id}: '${3:example_sys_id}'}).then(function(response) {",
            "\t${4:c.exampleWidget} = response;",
            "});"
          ],
          "description": "Embedded widget: Use spUtil.get() to get a widget model in the client script"
        },
        "Service Portal: spUtil Record Watch": {
          "prefix": "sp-spUtil-record-watch",
          "body": [
            "spUtil.recordWatch($$scope, '${1:incident}', '${2:active=true}', function(name, data) {",
            "\t$3console.log(name);",
            "\t$4console.log(data);",
            "});"
          ],
          "description": "Record Watch: A tool that allows a widget developer to respond to table updates in real-time"
        }
      }